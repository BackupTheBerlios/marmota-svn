/*
 * Marmota - Open-Source, easy to use Groupware
 * Copyright (C) 2007, 2008  The Marmota Team
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package de.berlios.marmota.core.client.userManagment;

import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;

import javax.swing.AbstractListModel;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

import de.berlios.marmota.core.client.MarmotaClient;
import de.berlios.marmota.core.common.userManagment.Group;
import de.berlios.marmota.core.common.userManagment.User;
import de.berlios.marmota.core.common.userManagment.UserRemoteInterface;

/**
 * The Frame-GUI to manage Users and Groups
 * @author sebmeyer
 */
public class UserManagmentFrame extends javax.swing.JFrame {
	
	private static final long serialVersionUID = -7212245110513935213L;
	
	/**
	 * Connection to the User-Managment on the server
	 */
	private UserRemoteInterface userManagment;
	
	public UserManagmentFrame() {
		try {
			userManagment = (UserRemoteInterface) MarmotaClient.SERVER_REGISTRY.lookup("UserManagment");
			initComponents();
			fillListsWithData();
		} catch (Exception e) {
			e.printStackTrace();
			JOptionPane.showMessageDialog(this, "Error while connecting the Server: " + e.getMessage(), "Error while connecting the Server", JOptionPane.ERROR_MESSAGE);
			this.dispose();
		}
	}
	
    /**
     * Get the data for the lists from the server
     */
    private void fillListsWithData() {
    	// Filling the GroupList with data
		try {
			List<Group> groupListServer = userManagment.getGroups();
			GroupListModel glmodel = (GroupListModel) groupList.getModel(); 
			for (int i = 0; i < groupListServer.size(); i++) {
				glmodel.addElement(groupListServer.get(i)); 
			}
		} catch (RemoteException e) {
			e.printStackTrace();
			JOptionPane.showMessageDialog(this, "Error getting groups from server: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
		}
		// Filling the UserList with data
		try {
			List<User> userListServer = userManagment.getUsers();
			UserListModel ulmodel = (UserListModel) userList.getModel(); 
			for (int i = 0; i < userListServer.size(); i++) {
				ulmodel.addElement(userListServer.get(i)); 
			}
		} catch (RemoteException e) {
			e.printStackTrace();
			JOptionPane.showMessageDialog(this, "Error getting groups from server: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
		}
	}

	/** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        leftPanel = new javax.swing.JPanel();
        userButtonPanel = new javax.swing.JPanel();
        createUserBut = new javax.swing.JButton();
        deleteUserBut = new javax.swing.JButton();
        userListScrollBar = new javax.swing.JScrollPane();
        userList = new javax.swing.JList();
        rightPanel = new javax.swing.JPanel();
        groupButtonPanel = new javax.swing.JPanel();
        createGroupBut = new javax.swing.JButton();
        deleteGroupBut = new javax.swing.JButton();
        groupListScrollBar = new javax.swing.JScrollPane();
        groupList = new javax.swing.JList();
        downPanel = new javax.swing.JPanel();
        saveBut = new javax.swing.JButton();
        closeBut = new javax.swing.JButton();
        centerPanel = new javax.swing.JPanel();
        detailPanel = new javax.swing.JPanel();
        fullNameLabel = new javax.swing.JLabel();
        fullNameField = new javax.swing.JTextField();
        usernameLabel = new javax.swing.JLabel();
        usernameField = new javax.swing.JTextField();
        commentLabel = new javax.swing.JLabel();
        commentField = new javax.swing.JTextField();
        centerdownPanel = new javax.swing.JPanel();
        resetPasswordBut = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("User- and Groupmanagment");

        leftPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("User"));
        leftPanel.setLayout(new java.awt.BorderLayout());

        userButtonPanel.setLayout(new java.awt.BorderLayout());

        createUserBut.setText("Create New");
        createUserBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createUserButActionPerformed(evt);
            }
        });
        userButtonPanel.add(createUserBut, java.awt.BorderLayout.PAGE_START);

        deleteUserBut.setText("Delete User");
        deleteUserBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteUserButActionPerformed(evt);
            }
        });
        userButtonPanel.add(deleteUserBut, java.awt.BorderLayout.PAGE_END);

        leftPanel.add(userButtonPanel, java.awt.BorderLayout.PAGE_END);

        userList.setModel(new UserListModel());
        userList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        userList.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
			public void valueChanged(ListSelectionEvent e) {
				performUserListSelectionChanged(e);
			}
        });
        userListScrollBar.setViewportView(userList);

        leftPanel.add(userListScrollBar, java.awt.BorderLayout.CENTER);

        getContentPane().add(leftPanel, java.awt.BorderLayout.LINE_START);

        rightPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Groups"));
        rightPanel.setLayout(new java.awt.BorderLayout());

        groupButtonPanel.setLayout(new java.awt.BorderLayout());

        createGroupBut.setText("Create Group");
        createGroupBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createGroupButActionPerformed(evt);
            }
        });
        groupButtonPanel.add(createGroupBut, java.awt.BorderLayout.PAGE_START);

        deleteGroupBut.setText("Delete Group");
        deleteGroupBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteGroupButActionPerformed(evt);
            }
        });
        groupButtonPanel.add(deleteGroupBut, java.awt.BorderLayout.PAGE_END);

        rightPanel.add(groupButtonPanel, java.awt.BorderLayout.PAGE_END);

        groupList.setModel(new GroupListModel());
        groupListScrollBar.setViewportView(groupList);

        rightPanel.add(groupListScrollBar, java.awt.BorderLayout.CENTER);

        getContentPane().add(rightPanel, java.awt.BorderLayout.LINE_END);

        saveBut.setText("Save");
        saveBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButActionPerformed(evt);
            }
        });
        downPanel.add(saveBut);

        closeBut.setText("Close");
        closeBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButActionPerformed(evt);
            }
        });
        downPanel.add(closeBut);

        getContentPane().add(downPanel, java.awt.BorderLayout.PAGE_END);

        centerPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("User Details"));
        centerPanel.setLayout(new java.awt.BorderLayout());
        centerPanel.setPreferredSize(new Dimension(200, 50));

        detailPanel.setLayout(new java.awt.GridLayout(3, 2));

        fullNameLabel.setText("Full Name:");
        detailPanel.add(fullNameLabel);

        detailPanel.add(fullNameField);

        usernameLabel.setText("Username:");
        detailPanel.add(usernameLabel);

        detailPanel.add(usernameField);

        commentLabel.setText("Comment");
        detailPanel.add(commentLabel);

        detailPanel.add(commentField);

        centerPanel.add(detailPanel, java.awt.BorderLayout.PAGE_START);

        centerdownPanel.setLayout(new java.awt.BorderLayout());

        resetPasswordBut.setText("Reset Password");
        resetPasswordBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetPasswordButActionPerformed(evt);
            }
        });
        centerdownPanel.add(resetPasswordBut, java.awt.BorderLayout.PAGE_START);

        centerPanel.add(centerdownPanel, java.awt.BorderLayout.CENTER);

        getContentPane().add(centerPanel, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>


	/**
	 * Will be called when the user-selection has changed
	 * @param e
	 */
	private void performUserListSelectionChanged(ListSelectionEvent e) {
		if (userList.getSelectedIndex() > -1) {
			UserListModel ulm = (UserListModel) userList.getModel();
			fillUserdataFields(ulm.getUserAt(userList.getSelectedIndex()));
		}
	}
	
	/**
	 * Fill the Testfields with the user's data
	 * @param u
	 */
	private void fillUserdataFields(User u) {
		// Filling the textfields with data
		this.usernameField.setText(u.getUsername());
		this.fullNameField.setText(u.getFullName());
		this.commentField.setText(u.getComment());
		// selecting the users groups
		if (u.getGroups() != null) {
			ArrayList<Integer> indicesToSelect = new ArrayList<Integer>();
			GroupListModel gml = (GroupListModel) groupList.getModel();
			for (int i = 0; i < gml.getSize(); i++) {
				for (Group userGroup : u.getGroups()) {
					if (userGroup.getId().equals(gml.getGroupAt(i).getId())) {
						indicesToSelect.add(i);
						break;
					}
				}
			}
			int[] iarray = new int[indicesToSelect.size()];
			for (int i = 0; i < indicesToSelect.size(); i++) {
				iarray[i] = indicesToSelect.get(i);
			}
			groupList.setSelectedIndices(iarray);
		}
	}

	/**
     * Will be called by pressing the "close"-Button
     * @param evt
     */
    private void closeButActionPerformed(ActionEvent evt) {
    	this.dispose();
	}

	/**
     * Will be called by klicking "new user"
     * @param evt
     */
    private void createUserButActionPerformed(java.awt.event.ActionEvent evt) {
    	User user = new User();
    	user.setUsername("NewUser" + userList.getModel().getSize()+1);
    	UserListModel model = (UserListModel) userList.getModel();
    	model.addElement(user);
    }

    /**
     * Will be called by klicking "delete user"
     * @param evt
     */
    private void deleteUserButActionPerformed(java.awt.event.ActionEvent evt) {
    	if (userList.getSelectedIndex() >= 0) {
    		UserListModel model = (UserListModel) userList.getModel();
    		User u = model.getUserAt(userList.getSelectedIndex());
    		if (u.getId() == null) {
    			model.removeElement(u);
    		} else {
    			try {
					userManagment.deleteUserByID(u.getId());
					model.removeElement(u);
				} catch (RemoteException e) {
					JOptionPane.showMessageDialog(this, "Failed to connect server for delete: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
					e.printStackTrace();
				}
    		}
    	}
    }
    
    /**
     * Will be called by klicking "delete group"
     * @param evt
     */
    private void deleteGroupButActionPerformed(java.awt.event.ActionEvent evt) {
    	if (groupList.getSelectedIndex() >= 0) {
    		GroupListModel model = (GroupListModel) groupList.getModel();
    		Group g = model.getGroupAt(groupList.getSelectedIndex());
    		if (g.getId() == null) {
    			model.removeElement(g);
    		} else {
    			try {
					userManagment.deleteGroup(g);
					model.removeElement(g);
				} catch (RemoteException e) {
					JOptionPane.showMessageDialog(this, "Failed to connect server for delete: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
					e.printStackTrace();
				}
    		}
    	}
    }

    /**
     * Will be called by "create new group"
     * @param evt
     */
    private void createGroupButActionPerformed(java.awt.event.ActionEvent evt) {
    	String newGroupName = JOptionPane.showInputDialog(this, "Please enter the name for the new group:", "New Group", JOptionPane.QUESTION_MESSAGE);
    	if (newGroupName != null) {
    		try {
	    		Group g = new Group();
	    		g.setGroupname(newGroupName);
	    		Integer id = userManagment.addOrUpdaeGroup(g);
	    		g.setId(id);
	    		GroupListModel gmodel = (GroupListModel) groupList.getModel();
	    		gmodel.addElement(g);
			} catch (RemoteException e) {
				e.printStackTrace();
				JOptionPane.showMessageDialog(this, "Failed to connect server for creating group: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
			}
    	}
    }

    /**
     * Save all all data to the database
     * @param evt
     */
    private void saveButActionPerformed(java.awt.event.ActionEvent evt) {
    	if (userList.getSelectedIndex() > -1) {
    		try {
    			UserListModel umodel = (UserListModel) userList.getModel();
    			User u = umodel.getUserAt(userList.getSelectedIndex());
    			u.setUsername(this.usernameField.getText());
    			u.setFullName(this.fullNameField.getText());
    			u.setComment(this.commentField.getText());
    			u.getGroups().clear();
    			int[] selectedIndices = groupList.getSelectedIndices();
    			for(int i = 0; i < selectedIndices.length; i++) { 
    			}
    			GroupListModel gml = (GroupListModel) groupList.getModel();
    			for (int i = 0; i < selectedIndices.length; i++) {
    				u.getGroups().add(gml.getGroupAt(selectedIndices[i]));
    			}
    			int saved = userManagment.addOrUpdateUser(u);
    			if (u.getId() == null) {
    				u.setId(saved);
    			}
    			userList.repaint();
    		} catch (RemoteException e) {
    			e.printStackTrace();
    			JOptionPane.showMessageDialog(this, "Failed to connect server for saving: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    		}
		}
    }

    private void resetPasswordButActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }
    
    
    // Variables declaration - do not modify
    private javax.swing.JPanel centerPanel;
    private javax.swing.JPanel centerdownPanel;
    private javax.swing.JButton closeBut;
    private javax.swing.JTextField commentField;
    private javax.swing.JLabel commentLabel;
    private javax.swing.JButton createGroupBut;
    private javax.swing.JButton createUserBut;
    private javax.swing.JButton deleteGroupBut;
    private javax.swing.JButton deleteUserBut;
    private javax.swing.JPanel detailPanel;
    private javax.swing.JPanel downPanel;
    private javax.swing.JTextField fullNameField;
    private javax.swing.JLabel fullNameLabel;
    private javax.swing.JPanel groupButtonPanel;
    private javax.swing.JList groupList;
    private javax.swing.JScrollPane groupListScrollBar;
    private javax.swing.JPanel leftPanel;
    private javax.swing.JButton resetPasswordBut;
    private javax.swing.JPanel rightPanel;
    private javax.swing.JButton saveBut;
    private javax.swing.JPanel userButtonPanel;
    private javax.swing.JList userList;
    private javax.swing.JScrollPane userListScrollBar;
    private javax.swing.JTextField usernameField;
    private javax.swing.JLabel usernameLabel;
    // End of variables declaration
    

    private class GroupListRenderer extends DefaultListCellRenderer {
    	
    	
    	
    }
    
    
    /**
     * Internal class for displaying the groups
     * @author sebmeyer
     *
     */
    private class GroupListModel extends AbstractListModel {
 
		private static final long serialVersionUID = 6244395501381046967L;
		
		Vector<Group> dataVector = new Vector<Group>();
		
		public void addElement(Group g) {
			dataVector.add(g);
			this.fireContentsChanged(this, getSize() - 2, getSize() - 1);
		}
		
		public void removeElementAt(int index) {
			dataVector.remove(index);
			this.fireIntervalRemoved(this, index, index);
		}
		
		public void removeElement(Group g) {
			dataVector.remove(g);
			this.fireIntervalRemoved(this, 0, getSize() - 1);
		}
		

		public Object getElementAt(int index) {
			String groupname = dataVector.get(index).getGroupname();
			return groupname;
		}

		public int getSize() {
			int size = dataVector.size();
			return size;
		}
		
		public Group getGroupAt(int index) {
			return dataVector.get(index);
		}
		
			
    }
    
    
    /**
     * Internal class for displaying the users
     * @author sebmeyer
     *
     */
    private class UserListModel extends AbstractListModel {

		private static final long serialVersionUID = -6306303952554231471L;

		Vector<User> dataVector = new Vector<User>();
		
		public void addElement(User u) {
			dataVector.add(u);
			this.fireContentsChanged(this, getSize() - 2, getSize() - 1);
		}
		
		public void removeElementAt(int index) {
			dataVector.remove(index);
			this.fireIntervalRemoved(this, index, index);
		}
		
		public void removeElement(User u) {
			dataVector.remove(u);
			this.fireIntervalRemoved(this, 0, getSize() - 1);
		}
		
		public Object getElementAt(int index) {
			String username = dataVector.get(index).getUsername();
			return username;
		}

		public int getSize() {
			int size = dataVector.size();
			return size;
		}
		
		public User getUserAt(int index) {
			return dataVector.get(index);
		}
    	
    }
    

}
